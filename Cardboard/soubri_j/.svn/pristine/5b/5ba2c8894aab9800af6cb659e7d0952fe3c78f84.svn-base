/*                                                                                                               
** ETNA PROJECT, 19/10/2018 by soubri_j                                                                          
** inventory.h                                                                                                
** File description: 
**      File containing all functions to manage an inventory for
**      Cardboard Pulley Training.
*/
#include "inventory.h"

/*
    Function used to create an inventory
*/
inventory_t *new_inventory(){
    inventory_t *inventory = NULL;

    inventory = malloc(sizeof(*inventory));
    return inventory;   
}

/*
    Function that clear and free an inventory
    Params :
        inventory : Inventory to clear
*/
void clear_inventory(inventory_t *inventory)
{
    if (inventory != NULL) {
        while (inventory->items != NULL) {
            inventory->items = inventory->items->next;
            free(inventory->items);
        }
        free(inventory);
    }
    my_putstr("Inventory cleared\n");
}

/*
    Function that add an item to the inventory.
    Params : 
        inv : Inventory where to add the item
        item : The item to add in the inventory
*/
void add_to_inventory(inventory_t *inv, item_t *item)
{
    if (inv != NULL && item != NULL) {
        if (inv->items == NULL) {
            inv->items = malloc(sizeof(*(inv->items)));
        }
        if (inv->items != NULL) {
            item->previous = inv->items->previous;
            inv->items->previous->next = item;
            item->next = inv->items;
            inv->items->previous = item;
            inv->items = item;
        }
        inv->nb_items += 1;
    }
}

/*
    Function that removes from the inventory based on the id
    of the item and returns the removed item if found, NULL otherwise.
    Params : 
        inv : Inventory where to remove the item
        id : Id of the item to remove
    Returns :
        The item removed or NULL if not found
*/
item_t *remove_from_inventory(inventory_t *inv, int id)
{
    item_t *item_to_return = NULL;
    item_t *ptr = NULL;

    if (inv != NULL) {
        ptr = inv->items;
        for (int i = 0; i < inv->nb_items && item_to_return == NULL; ++i) {
            if (ptr->id == id) {
                item_to_return = ptr;
                if (inv->nb_items <= 1) {
                    inv->items = NULL;
                } else if (inv->nb_items == 2) {
                    ptr->next->next = NULL;
                    ptr->previous->previous = NULL;
                } else {
                    ptr->next->previous = ptr->previous;
                    ptr->previous->next = ptr->next;
                }
                item_to_return->next = NULL;
                item_to_return->previous = NULL;
                inv->nb_items -= 1;
            } else {
                ptr = ptr->next;
            }
        }
    }
    return item_to_return;
}

/*
    Function that returns the item if found based on the id, NULL otherwise.
    Params : 
        inv : The inventory where to find the item
        id : The id of item to find
    Returns :
        The item found or NULL otherwise
*/
item_t *find_in_inventory(inventory_t *inv, int id)
{
    item_t *ptr = NULL;
    item_t *item_to_return = NULL;

    if (inv != NULL) {
        ptr = inv->items;
        for (int i = 0; i < inv->nb_items && item_to_return == NULL; ++i) {
            if (ptr->id == id) {
                item_to_return = ptr;
            } else {
                ptr = ptr->next;
            }
        }
    }
    return item_to_return;
}

/*
    Function that returns the first item of type type, NULL otherwise.
    Params :
        inv : Inventory where to find the item
        type : Item's seeked type
    Returns :
        The first item found, NULL otherwise.
*/
item_t *find_first_in_inventory(inventory_t *inv, item_type_e type)
{
    item_t *ptr = NULL;
    item_t *item_to_return;

    if (inv != NULL) {
        ptr = inv->items;
        for (int i = 0; i < inv->nb_items && item_to_return == NULL; ++i) {
            if (ptr->type == type) {
                item_to_return = ptr;
            }
        }
    }
    return item_to_return;
}

/*
    Function to display the content of an inventory
    Params : 
        inv : Inventory to display
*/
void print_inventory(inventory_t *inv)
{
    item_t *ptr = NULL;

    if (inv != NULL) {
        ptr = inv->items;
        for (int i = 0; i < inv->nb_items; ++i) {
            print_item(ptr);
        }
    }
}

/*
    Function to display the content of an item.
    Params :
        item : The item to display
*/
void print_item(item_t *item)
{
    if (item != NULL) {
        my_putstr("Item [");
        my_putnbr(item->id);
        my_putstr("]:");
        my_putstr(ITEM_TYPES[item->type]);
        my_putchar('\n');
    }
}
