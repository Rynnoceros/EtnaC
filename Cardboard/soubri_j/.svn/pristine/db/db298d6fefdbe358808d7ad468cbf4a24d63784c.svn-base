/*
** ETNA PROJECT, 19/10/2018 by soubri_j
** map.c
** File description: 
**      File containing all functions to manage a map for
**      Cardboard Pulley Training.
*/
#include "map.h"

/*
    Function that generate a random map for a game
    Params :
        nb_tiles : The width of the map in tiles
        nb_items : The number of items to place on the map
        nb_characters : The number of characters to place on the map
    Returns :
        The generated map if there was no problem, NULL otherwise.
*/
map_t *generate_random_map(int nb_tiles, int nb_items, int nb_characters)
{
    map_t *map_to_generate = NULL;
    int tiles_number = 0;
    int total_to_place = 0;

    if (nb_tiles > 0) {
        tiles_number = nb_tiles * nb_tiles;
        total_to_place = nb_items + nb_characters;
        if (total_to_place < nb_tiles && total_to_place >= 0) {
            map_to_generate = malloc(sizeof(*map_to_generate));
            if (map_to_generate != NULL) {
                map_to_generate->map = malloc(sizeof(*map_to_generate->map) * nb_tiles);
                if (map_to_generate->map != NULL) {
                    map_to_generate->width = nb_tiles;
                    for (int i = 0; i < nb_tiles; ++i) {
                        map_to_generate->map[i] = malloc(sizeof(map_to_generate->map) * nb_tiles);
                    }
                    place_items_on_map(map_to_generate, nb_items);
                    place_characters_on_map(map_to_generate, nb_characters);
                }
            }
        }
    }
    return map_to_generate;
}

/*
    Function to place something on a map
    Params :
        map : The map where to place items
        nb_items : Number of items to place on the map
*/
void place_items_on_map(map_t *map, int nb_items)
{
    int x = 0;
    int y = 0;
    if (map != NULL) {
        for (int i = 0; i < nb_items; ++i) {
            do {
                x = (random() % map->width);
                y = (random() % map->width);
            } while (map->map[x][y].item != NULL);

            map->map[x][y].item = new_item(i, random() % NB_ITEM_TYPE);
            map->map[x][y].item->coord[E_X] = x;
            map->map[x][y].item->coord[E_Y] = y;
        }
    }
}

/*
    Function to place characters on a map
    Params :
        map : The map where to place characters
        nb_characters : Number of characters to place on the map
*/
void place_characters_on_map(map_t *map, int nb_characters)
{
    int x = 0;
    int y = 0;
    if (map != NULL) {
        for (int i = 0; i < nb_characters; ++i) {
            do {
                x = (random() % map->width);
                y = (random() % map->width);
            } while (map->map[x][y].item != NULL);

            map->map[x][y].characters = new_character(i, 
                (random() % (NB_CHARACTERS_TYPE - 1)) + 1, 
                random() % NB_DIRECTIONS, ((int []){x, y}));
            map->map[x][y].characters->coord[E_X] = x;
            map->map[x][y].characters->coord[E_Y] = y;
        }
    }
}