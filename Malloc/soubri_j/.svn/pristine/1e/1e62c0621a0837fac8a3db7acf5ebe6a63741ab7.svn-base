/*
** ETNA PROJECT, 10/01/2019 by soubri_j/martin_m
** malloc.c
** File description: 
**      This file contains malloc program.
*/

#include <unistd.h>
#include "malloc.h"

block_t* first_block_in_memory = NULL;
block_t* last_block_in_memory = NULL;

/*
    Method to allocate space in memory.
    Parameters :
        size : Size to allocate
    Returns :
        A block_t pointer to the allocated space if ok, NULL otherwise.
*/
block_t* allocate_memory_space(size_t size) {
    block_t* to_return = NULL;
    void* current_heap = NULL;

    if (size > 0) {
        current_heap = sbrk(0);
        if (sbrk(size + sizeof(*to_return)) != (void*)-1) {
            to_return = current_heap;
            to_return->size = size;
            to_return->next = NULL;
            to_return->prev = last_block_in_memory;
            if (last_block_in_memory != NULL) {
                last_block_in_memory->next = to_return;
            }
            last_block_in_memory = to_return;
        }
    }

    return to_return;
}

/*
    Method used to find an available block in the list of blocks
    Parameters :
        size : Minimum size of a block to find
    Returns :
        The block if was found, NULL otherwise.
*/
block_t* find_available_block(size_t size)
{
    block_t* ptr = NULL;
    int block_found = 0;

    if (size > 0) {
        if (first_block_in_memory != NULL) {
            ptr = first_block_in_memory;
            while (ptr != NULL && block_found == 0) {
                if (ptr->available == 1 && ptr->size >= size) {
                    block_found = 1;
                } else {
                    ptr = ptr->next;
                }
            }
        }
    }

    return ptr;
}

/*
    Malloc function. Allocate memory size.
    Parameter :
        size : Size to allocate
*/
void* malloc(size_t size)
{
    block_t* to_return = NULL;

    if (first_block_in_memory == NULL) {
        to_return = allocate_memory_space(size);
    } else {
        to_return = find_available_block(size);
        if (to_return == NULL) {
            to_return = allocate_memory_space(size);
        }
    }

    return to_return;
}

/*
    Free allocated memory.
    Parameters :
        ptr : The pointer to free
*/
void free(void* ptr)
{
    if (ptr != NULL) {
        
    }
}